import gnupg


class GPG:
    def __init__(self, binary='gpg2', verbose=False, homepath='data/gnupg'):
        self.gpg = gnupg.GPG(gnupghome=homepath,verbose=verbose, gpgbinary=binary)

    #产生密钥
    def gen_key(self, name, email, lock):
        # 产生输入数据
        input_data = self.gpg.gen_key_input(name_real=name, name_email=email, name_comment='Generated by GPGChat',
                                            passphrase=lock)
        keyid = self.gpg.gen_key(input_data)
        # 发送密钥到服务器
        self.gpg.send_keys('pgp.mit.edu', str(keyid))
        return keyid

    #导出密钥
    #keyid必须，secret=True表示导出私钥，否则导出公钥
    def export_key(self,keyid,secret=False,lock=None):
        if secret:        
            print(self.gpg.export_keys(keyid,True,passphrase=lock))
        else:
            print(self.gpg.export_keys(keyid))

    #搜索公钥
    def search(self, keyword):
        keys=self.gpg.search_keys(keyword, 'pgp.mit.edu')
        return keys

    def keys_to_datamap(self, keys):
        # 0: name, 1: mail, 2: keyid
        result = {}
        cnt = 0
        for key in keys:
            if len(key['uids']) < 1:
                break
            userid = key['uids'][0]
            userid_split = userid.split('<')
            if len(userid_split) <= 1:
                break
            name = userid_split[0].rstrip()
            mail = userid_split[1].rstrip('>')
            result[cnt] = {'name': name, 'mail': mail, 'keyid': key['keyid']}
            cnt = cnt + 1
        return result

    # 下载公钥
    def download_key(self,keyid):
        import_result = self.gpg.recv_keys('pgp.mit.edu', keyid)
        print(import_result.fingerprints)

    # 加密
    def encrypt(self, message, keyid):
        self.download_key(keyid)
        encrypted_data = self.gpg.encrypt(message,keyid, always_trust=True)
        return encrypted_data.data.decode('latin-1')

    # 解密
    def decrypt(self, encrypted_data, lock):
        decrypted_data = self.gpg.decrypt(encrypted_data, passphrase=lock)
        return decrypted_data.data.decode('latin-1')